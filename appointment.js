import { bot } from './bot.js';
import castomEvent from './createEvent.js';
import { readEvents } from './crud.js';
import getFutureEventsRange from './dateRange.js';
import generateTimeKeyboard from './generateTimeKeyboard.js';
import { dentalProcedures, generateCalendarKeyboard, generateMainMenu } from './keyboards.js';
import valuesData from './values.js';

const userStates = new Map(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Map –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
const requestPhoneNumber = (chatId, procedureIndex, selectedDate, selectedTime) => {
    bot.sendMessage(chatId, `üìã –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å—É:

        ü¶∑ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: ${dentalProcedures[procedureIndex].name} (${dentalProcedures[procedureIndex].duration})
        üìÖ –î–∞—Ç–∞: ${selectedDate}
        üïí –ß–∞—Å: ${selectedTime}
        
üì± –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è`, {
            reply_markup: {
                keyboard: [
                    [{
                        text: 'üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                        request_contact: true
                    }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
};

const appointment = () => {

    bot.on('callback_query', async (query) => {

        const chatId = query.message.chat.id;

        const { id, data, message } = query;    
   
        if (data.startsWith('procedure_')) {
            
            const procedureIndex = parseInt(data.split('_')[1], 10);
            const procedure = dentalProcedures[procedureIndex];
    
            const today = new Date();
            bot.sendMessage(chatId, `üìÖ *–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:* _${procedure.name}_`, {
                parse_mode: 'Markdown',
                reply_markup: generateCalendarKeyboard(today, procedureIndex, 15),
            });              
            bot.answerCallbackQuery(query.id);
    
        } else if (data.startsWith('date_')) {
    
            const [_, procedureIndex, selectedDate] = data.split('_');

            const date = selectedDate.split('-');

            const range = getFutureEventsRange(date[0], date[1], date[2]);

            const selectedProcedure = dentalProcedures[procedureIndex];
            const doctor = selectedProcedure.doctor;

            let todayEvents;


            if (doctor === '–¢–µ—Ä–∞–ø–µ–≤—Ç') {

                todayEvents = await readEvents(range.startDate, range.endDate, valuesData.therapistCalendarId);

            } else if (doctor === '–û—Ä—Ç–æ–¥–æ–Ω—Ç') {

                todayEvents = await readEvents(range.startDate, range.endDate, valuesData.ortodontCalendarId);

            }
            
            console.log(todayEvents)

            bot.sendMessage(chatId, `‚è∞ *–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –¥–∞—Ç–∏:* _${selectedDate}_`, {
                parse_mode: 'Markdown',
                reply_markup: generateTimeKeyboard(procedureIndex, selectedDate, todayEvents),
            });              

            bot.answerCallbackQuery(query.id);
    
        } else if (data.startsWith('time')) {

            const [_, procedureIndex, selectedDate, selectedTime] = data.split('_');
    
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            userStates.set(chatId, {
                procedureIndex,
                selectedDate,
                selectedTime
            });
    
            // –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            requestPhoneNumber(chatId, procedureIndex, selectedDate, selectedTime);
    
            // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback-–∑–∞–ø–∏—Ç
            bot.answerCallbackQuery(id, { text: '–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', show_alert: false });
        }
            
    });

    bot.on('contact', async (msg) => {
        const chatId = msg.chat.id;
        const contact = msg.contact;
    
        if (contact && userStates.has(chatId)) {
            const userData = userStates.get(chatId);
    
            // –õ–∞–Ω—Ü—é–∂–æ–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —Ç—É—Ç
            const { procedureIndex, selectedDate, selectedTime } = userData;

            const resultMessage = await castomEvent(contact.phone_number, procedureIndex, selectedDate, selectedTime);

            bot.sendMessage(chatId, resultMessage, {
                parse_mode: 'MarkdownV2',
                reply_markup: generateMainMenu()
            });

            const procedure = dentalProcedures[procedureIndex]



            const therapistCalendar = "https://calendar.google.com/calendar/embed?src=1d4384ffe215c68239994d46f710ccecaa3dabdb902db248c2acb511c9586bc4%40group.calendar.google.com&ctz=Europe%2FKiev";
            const orthodontistCalendar = "https://calendar.google.com/calendar/embed?src=c8caa800bf872c7698069db579cc8155ef185d0587c5d2ace406eb795fd26f18%40group.calendar.google.com&ctz=Europe%2FKiev";

            let calendarLink = "";
            if (procedure.doctor === "–¢–µ—Ä–∞–ø–µ–≤—Ç") {
            calendarLink = `üìÖ [–ö–∞–ª–µ–Ω–¥–∞—Ä –ª—ñ–∫–∞—Ä—è](${therapistCalendar})`;
            } else if (procedure.doctor === "–û—Ä—Ç–æ–¥–æ–Ω—Ç") {
            calendarLink = `üìÖ [–ö–∞–ª–µ–Ω–¥–∞—Ä –ª—ñ–∫–∞—Ä—è](${orthodontistCalendar})`;
            }

            const escapeMarkdown = (text) => {
            return text.replace(/[_*[\]()~`>#\+\-=|{}.!]/g, '\\$&'); // –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤
            };

            bot.sendMessage(
            valuesData.logsID, 
            `üìå *–ù–æ–≤–∏–π –∑–∞–ø–∏—Å*  
            üë§ *–ö–ª—ñ—î–Ω—Ç:* ${escapeMarkdown(contact.first_name)}  
            üíÜ‚Äç‚ôÇÔ∏è *–ü–æ—Å–ª—É–≥–∞:* ${escapeMarkdown(procedure.name)}  
            ‚è≥ *–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:* ${escapeMarkdown(procedure.duration)}  
            üë®‚Äç‚öïÔ∏è *–õ—ñ–∫–∞—Ä:* ${escapeMarkdown(procedure.doctor)}  
            üìÖ *–î–∞—Ç–∞:* ${escapeMarkdown(selectedDate)}  
            ‚è∞ *–ß–∞—Å:* ${escapeMarkdown(selectedTime)}  

            ‚úÖ –í–∞—à –∑–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ  
            ${calendarLink}`,
            { parse_mode: "MarkdownV2" }
            );


    
            // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
            userStates.delete(chatId);
        } else {
            bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Å–ø–æ—á–∞—Ç–∫—É.', {
                reply_markup: generateMainMenu()
            });
        }
    });

};

export default appointment;

