import TelegramBot from 'node-telegram-bot-api';
import data from './values.js';
import { dentalProcedures, escapeMarkdown, generateMainMenu, generateProcedureKeyboard } from './keyboards.js';
import appointment from './appointment.js';

const bot = new TelegramBot(data.token, { polling: true });

appointment();

bot.setMyCommands([
    { command: '/start', description: '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' },
  ]);

bot.onText(/\/start/, async (msg) => {

    const chatId = msg.chat.id;

    bot.sendMessage(chatId, 'üëã –í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é:', {
        reply_markup: generateMainMenu()
    });

});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    switch (msg.text) {
        case 'üìù –ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º':
            bot.sendMessage(chatId, 'ü¶∑ *–û–±–µ—Ä—ñ—Ç—å –ª—ñ–∫–∞—Ä—è:*', {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        [{ text: '–¢–µ—Ä–∞–ø–µ–≤—Ç' }],
                        [{ text: '–û—Ä—Ç–æ–¥–æ–Ω—Ç' }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                }
            });
            break;
        case '–¢–µ—Ä–∞–ø–µ–≤—Ç':
            bot.sendMessage(chatId, 'ü¶∑ *–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:*', {
                parse_mode: 'Markdown',
                reply_markup: generateProcedureKeyboard(dentalProcedures, '–¢–µ—Ä–∞–ø–µ–≤—Ç'),
            });              
            break;
        case '–û—Ä—Ç–æ–¥–æ–Ω—Ç':
                bot.sendMessage(chatId, 'ü¶∑ *–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:*', {
                    parse_mode: 'Markdown',
                    reply_markup: generateProcedureKeyboard(dentalProcedures, '–û—Ä—Ç–æ–¥–æ–Ω—Ç'),
                });              
                break;
        case 'üí∞ –ü—Ä–∞–π—Å':
            bot.sendMessage(chatId, 'üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç');
            bot.sendMessage(chatId, `üìã [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω–∏–π –ø—Ä–∞–π—Å\\-–ª–∏—Å—Ç](${escapeMarkdown('https://docs.google.com/spreadsheets/d/1hGshc6J9SEEANoRjPzDvkaL-7pAlXufrLemNk_rdAuY/edit?usp=sharing')})`, {
                parse_mode: 'MarkdownV2'
            });
            break;
        case 'üìç –Ø–∫ –Ω–∞—Å –∑–Ω–∞–π—Ç–∏':
            bot.sendMessage(chatId, '–ú–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é: üìç –ö–∏—ó–≤, –≤—É–ª. –ì–∞—Ä–Ω–∞, 1.');
            bot.sendVideo(chatId, 'BAACAgQAAxkBAANxZ5DWlgIgcVnf64dr01zB2lzSBKoAAjEDAAK29DRQQ_YPteTGnjk2BA');
            break;
        case '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º':
            bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –º–∏ —à–≤–∏–¥–∫–æ –≤—ñ–¥–ø–æ–≤—ñ–º–æ!');
            // –î–æ–¥–∞–π—Ç–µ –ª–æ–≥—ñ–∫—É –¥–ª—è –∑–≤‚Äô—è–∑–∫—É
            break;
    }
});


bot.on('video', (msg) => {
    const chatId = msg.chat.id;
    const video = msg.video;

    if (video) {
        const videoId = video.file_id;

        bot.sendMessage(chatId, `–í–∞—à–µ –≤—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –û—Å—å –π–æ–≥–æ ID: ${videoId}`);
    } else {
        bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –≤—ñ–¥–µ–æ.');
    }
});


export { bot };