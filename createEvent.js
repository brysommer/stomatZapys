import { createEvent } from "./crud.js";
import { dentalProcedures, escapeMarkdown } from "./keyboards.js";
import { fromZonedTime, format } from 'date-fns-tz'


const generateUniversalCalendarLink = (googleEventLink) => {
    // –ü–∞—Ä—Å–∏–º–æ –¥–µ—Ç–∞–ª—ñ –∑ Google Calendar –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const url = new URL(googleEventLink);
    const eid = url.searchParams.get('eid');

    // iCloud –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
    const icloudLink = `webcal://p49-caldav.icloud.com/published/2/MTI3NjM5NTc1MTI3NjM5NTdfMTI3NjM5NTc1/${eid}`;

    return {
        googleCalendarLink: googleEventLink,
        icloudLink
    };
};

const castomEvent = async (phone, procedureIndex, selectedDate, selectedTime) => {
    try {
        const procedure = dentalProcedures[procedureIndex];
        if (!procedure) {
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏');
        }

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        const durationMinutes = parseInt(procedure.duration);
        if (isNaN(durationMinutes)) {
            throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏');
        }

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —á–∞—Å—É
        const kyivTime = `${selectedDate}T${selectedTime}:00`; // –õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å
        const startDateTime = fromZonedTime(kyivTime, 'Europe/Kyiv'); // UTC
        const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000); // UTC

        console.log('Start DateTime (UTC):', startDateTime);
        console.log('End DateTime (UTC):', endDateTime);

        const event = { 
            summary: procedure.name, 
            description: `–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞: ${phone}\n–¶–µ–π –∑–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.`, 
            start: { 
                dateTime: startDateTime.toISOString(), 
                timeZone: 'Europe/Kyiv', 
            }, 
            end: { 
                dateTime: endDateTime.toISOString(), 
                timeZone: 'Europe/Kyiv', 
            }, 
            extendedProperties: { 
                private: { 
                    phone: phone,
                    email: 'brysommer1@gmail.com'
                }, 
            },
            
        };

        const response = await createEvent(event);

        const calendarLinks = generateUniversalCalendarLink(response.htmlLink);

        console.log(calendarLinks)

        return `‚úÖ *–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ\\!* üéâ

üìÖ [–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é –¥–æ —Å–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è](${escapeMarkdown(response.htmlLink)})
`;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó:', error.message);
        return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó';
    }
};


export default castomEvent;
